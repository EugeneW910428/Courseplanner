{"ast":null,"code":"var _jsxFileName = \"/Users/eugenewang/Downloads/AutoCoursePlanner/frontend/src/context/GlobalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/createContext();\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [uploadedTranscript, setUploadedTranscript] = useState(null);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      uploadedTranscript,\n      setUploadedTranscript\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"Nh7Ne4J1V31w8qkUQKhkflIJ1z4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  const context = useContext(GlobalContext);\n  if (!context) {\n    throw new Error('useGlobalContext must be used within a GlobalProvider');\n  }\n  return context;\n};\n_s2(useGlobalContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","GlobalContext","GlobalProvider","children","_s","uploadedTranscript","setUploadedTranscript","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/eugenewang/Downloads/AutoCoursePlanner/frontend/src/context/GlobalContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst GlobalContext = createContext();\n\nexport const GlobalProvider = ({ children }) => {\n    const [uploadedTranscript, setUploadedTranscript] = useState(null);\n\n    return (\n        <GlobalContext.Provider value={{ uploadedTranscript, setUploadedTranscript }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const useGlobalContext = () => {\n    const context = useContext(GlobalContext);\n    if (!context) {\n        throw new Error('useGlobalContext must be used within a GlobalProvider');\n    }\n    return context;\n};\n\n\n\n\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMM,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAElE,oBACIE,OAAA,CAACC,aAAa,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,kBAAkB;MAAEC;IAAsB,CAAE;IAAAH,QAAA,EACxEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAACR,EAAA,CARWF,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAU3B,OAAO,MAAMY,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGnB,UAAU,CAACI,aAAa,CAAC;EACzC,IAAI,CAACe,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC5E;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}