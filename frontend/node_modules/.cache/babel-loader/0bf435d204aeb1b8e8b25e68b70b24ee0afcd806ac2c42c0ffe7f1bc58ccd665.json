{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api'; // Backend API base URL\n\n// Function to generate the schedule\nexport const generateSchedule = async formData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/generate-schedule`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to generate schedule:', error.message);\n    throw error;\n  }\n};\n\n// Function to fetch all courses (100-400 level)\nexport const fetch100to400LevelCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses`); // Update this endpoint to match your backend\n    const courses = response.data; // Assuming the response data is an array of courses\n\n    // Filter courses to include only those with course numbers between 100-400\n    const filteredCourses = courses.filter(course => {\n      const courseNumber = parseInt(course.CourseNumber, 10); // Parse the course number as an integer\n      return courseNumber >= 100 && courseNumber <= 400;\n    });\n    return filteredCourses;\n  } catch (error) {\n    console.error('Failed to fetch courses:', error.message);\n    throw error;\n  }\n};\n\n// Function to classify courses into core and electives\nexport const classifyCourses = courses => {\n  const coreCoursesList = [\"CSS301\", \"CSS342\", \"CSS343\", \"CSS350\", \"CSS360\", \"CSS370\", \"CSS422\", \"CSS430\", \"CSS497\"];\n  const core = [];\n  const electives = [];\n  const electiveCounts = {\n    200: 0,\n    400: 0,\n    special: 0\n  };\n  courses.forEach(course => {\n    const courseId = `${course.CurriculumAbbreviation}${course.CourseNumber}`;\n    const courseLevel = parseInt(course.CourseNumber, 10);\n\n    // Check if the course is a core course\n    if (coreCoursesList.includes(courseId)) {\n      core.push(course);\n    } else {\n      // Elective course classification\n      if (courseLevel >= 200) {\n        if (courseLevel >= 400) {\n          electiveCounts[400] += course.Credits || 5; // Default to 5 credits if undefined\n        } else {\n          electiveCounts[200] += course.Credits || 5;\n        }\n\n        // Special topics, internships, or independent study\n        if ([\"CSS397\", \"CSS498\", \"CSS499\", \"CSS290\", \"CSS390\", \"CSS490\"].includes(courseId)) {\n          electiveCounts.special += course.Credits || 5;\n        }\n        electives.push(course);\n      }\n    }\n  });\n\n  // Refine electives to meet the constraints\n  const refinedElectives = electives.filter(course => {\n    const courseLevel = parseInt(course.CourseNumber, 10);\n\n    // Prioritize 400-level courses (at least 15 credits required)\n    if (electiveCounts[400] < 15 && courseLevel >= 400) return true;\n\n    // Allow up to 10 credits of 200-level courses\n    if (electiveCounts[200] < 10 && courseLevel >= 200 && courseLevel < 400) return true;\n\n    // Allow up to 10 credits of special topics or independent study\n    if ([\"CSS397\", \"CSS498\", \"CSS499\", \"CSS290\", \"CSS390\", \"CSS490\"].includes(courseId) && electiveCounts.special < 10) {\n      return true;\n    }\n    return false;\n  });\n  return {\n    core,\n    electives: refinedElectives,\n    electiveCounts\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","generateSchedule","formData","response","post","headers","data","error","console","message","fetch100to400LevelCourses","get","courses","filteredCourses","filter","course","courseNumber","parseInt","CourseNumber","classifyCourses","coreCoursesList","core","electives","electiveCounts","special","forEach","courseId","CurriculumAbbreviation","courseLevel","includes","push","Credits","refinedElectives"],"sources":["/Users/eugenewang/Downloads/CapstoneProject/frontend/src/services/courseService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5001/api'; // Backend API base URL\n\n// Function to generate the schedule\nexport const generateSchedule = async (formData) => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/generate-schedule`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Failed to generate schedule:', error.message);\n        throw error;\n    }\n};\n\n// Function to fetch all courses (100-400 level)\nexport const fetch100to400LevelCourses = async () => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/courses`); // Update this endpoint to match your backend\n        const courses = response.data; // Assuming the response data is an array of courses\n\n        // Filter courses to include only those with course numbers between 100-400\n        const filteredCourses = courses.filter((course) => {\n            const courseNumber = parseInt(course.CourseNumber, 10); // Parse the course number as an integer\n            return courseNumber >= 100 && courseNumber <= 400;\n        });\n\n        return filteredCourses;\n    } catch (error) {\n        console.error('Failed to fetch courses:', error.message);\n        throw error;\n    }\n};\n\n// Function to classify courses into core and electives\nexport const classifyCourses = (courses) => {\n    const coreCoursesList = [\n        \"CSS301\", \"CSS342\", \"CSS343\", \"CSS350\", \n        \"CSS360\", \"CSS370\", \"CSS422\", \"CSS430\", \"CSS497\"\n    ];\n\n    const core = [];\n    const electives = [];\n    const electiveCounts = { 200: 0, 400: 0, special: 0 };\n\n    courses.forEach((course) => {\n        const courseId = `${course.CurriculumAbbreviation}${course.CourseNumber}`;\n        const courseLevel = parseInt(course.CourseNumber, 10);\n\n        // Check if the course is a core course\n        if (coreCoursesList.includes(courseId)) {\n            core.push(course);\n        } else {\n            // Elective course classification\n            if (courseLevel >= 200) {\n                if (courseLevel >= 400) {\n                    electiveCounts[400] += course.Credits || 5; // Default to 5 credits if undefined\n                } else {\n                    electiveCounts[200] += course.Credits || 5;\n                }\n\n                // Special topics, internships, or independent study\n                if ([\"CSS397\", \"CSS498\", \"CSS499\", \"CSS290\", \"CSS390\", \"CSS490\"].includes(courseId)) {\n                    electiveCounts.special += course.Credits || 5;\n                }\n\n                electives.push(course);\n            }\n        }\n    });\n\n    // Refine electives to meet the constraints\n    const refinedElectives = electives.filter((course) => {\n        const courseLevel = parseInt(course.CourseNumber, 10);\n\n        // Prioritize 400-level courses (at least 15 credits required)\n        if (electiveCounts[400] < 15 && courseLevel >= 400) return true;\n\n        // Allow up to 10 credits of 200-level courses\n        if (electiveCounts[200] < 10 && courseLevel >= 200 && courseLevel < 400) return true;\n\n        // Allow up to 10 credits of special topics or independent study\n        if (\n            [\"CSS397\", \"CSS498\", \"CSS499\", \"CSS290\", \"CSS390\", \"CSS490\"].includes(courseId) &&\n            electiveCounts.special < 10\n        ) {\n            return true;\n        }\n\n        return false;\n    });\n\n    return { core, electives: refinedElectives, electiveCounts };\n};\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}