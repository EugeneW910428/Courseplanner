{"ast":null,"code":"// services/courseService.js\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch core courses\nexport const getCoreCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/core_courses`);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch core courses:', error);\n    throw error;\n  }\n};\n\n// Function to fetch electives based on career aspiration\nexport const getElectives = async careerAspiration => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/electives`, {\n      params: {\n        careerAspiration\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch electives:', error);\n    throw error;\n  }\n};\nconst generateSchedule = async (req, res) => {\n  const {\n    careerAspiration,\n    creditsPerQuarter,\n    coursePreference\n  } = req.body;\n\n  // Sometimes fields may be inside req.body as strings; make sure they are correctly extracted\n  if (!careerAspiration || !creditsPerQuarter || !coursePreference) {\n    return res.status(400).json({\n      error: \"Missing required fields: careerAspiration, creditsPerQuarter, or coursePreference\"\n    });\n  }\n  if (!req.file) {\n    return res.status(400).json({\n      error: 'No transcript file uploaded.'\n    });\n  }\n\n  // If multer parsed correctly, it should be good from here\n  try {\n    // Handle parsing, processing, etc.\n    console.log('Transcript:', req.file.originalname);\n    // Remaining logic...\n    res.json({\n      success: true,\n      message: \"Schedule generated successfully.\"\n    });\n  } catch (error) {\n    console.error('Error:', error);\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getCoreCourses","response","get","data","error","console","getElectives","careerAspiration","params","generateSchedule","req","res","creditsPerQuarter","coursePreference","body","status","json","file","log","originalname","success","message"],"sources":["/Users/eugenewang/Downloads/CapstoneProject/frontend/src/services/courseService.js"],"sourcesContent":["// services/courseService.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch core courses\nexport const getCoreCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/core_courses`);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch core courses:', error);\n    throw error;\n  }\n};\n\n// Function to fetch electives based on career aspiration\nexport const getElectives = async (careerAspiration) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/electives`, {\n      params: { careerAspiration },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch electives:', error);\n    throw error;\n  }\n};\n\nconst generateSchedule = async (req, res) => {\n    const { careerAspiration, creditsPerQuarter, coursePreference } = req.body;\n\n    // Sometimes fields may be inside req.body as strings; make sure they are correctly extracted\n    if (!careerAspiration || !creditsPerQuarter || !coursePreference) {\n        return res.status(400).json({ error: \"Missing required fields: careerAspiration, creditsPerQuarter, or coursePreference\" });\n    }\n\n    if (!req.file) {\n        return res.status(400).json({ error: 'No transcript file uploaded.' });\n    }\n\n    // If multer parsed correctly, it should be good from here\n    try {\n        // Handle parsing, processing, etc.\n        console.log('Transcript:', req.file.originalname);\n        // Remaining logic...\n        res.json({ success: true, message: \"Schedule generated successfully.\" });\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ error: \"Internal Server Error\" });\n    }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,eAAe,CAAC;IAChE,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAG,MAAOC,gBAAgB,IAAK;EACtD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,YAAY,EAAE;MAC5DS,MAAM,EAAE;QAAED;MAAiB;IAC7B,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMK,gBAAgB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEJ,gBAAgB;IAAEK,iBAAiB;IAAEC;EAAiB,CAAC,GAAGH,GAAG,CAACI,IAAI;;EAE1E;EACA,IAAI,CAACP,gBAAgB,IAAI,CAACK,iBAAiB,IAAI,CAACC,gBAAgB,EAAE;IAC9D,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEZ,KAAK,EAAE;IAAoF,CAAC,CAAC;EAC/H;EAEA,IAAI,CAACM,GAAG,CAACO,IAAI,EAAE;IACX,OAAON,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEZ,KAAK,EAAE;IAA+B,CAAC,CAAC;EAC1E;;EAEA;EACA,IAAI;IACA;IACAC,OAAO,CAACa,GAAG,CAAC,aAAa,EAAER,GAAG,CAACO,IAAI,CAACE,YAAY,CAAC;IACjD;IACAR,GAAG,CAACK,IAAI,CAAC;MAAEI,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAmC,CAAC,CAAC;EAC5E,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BO,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEZ,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}