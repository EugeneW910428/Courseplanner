{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the backend API\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch all 100-400 level courses\nexport const fetch100to400LevelCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses`);\n    return response.data; // Return the list of 100-400 level courses\n  } catch (error) {\n    console.error('Failed to fetch courses:', error.message);\n    throw error;\n  }\n};\n\n// Function to classify courses dynamically into core and elective\nexport const classifyCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses/classify`);\n    return response.data; // Returns { core: [...], electives: [...], electiveCounts: { ... } }\n  } catch (error) {\n    console.error('Failed to classify courses:', error.message);\n    throw error;\n  }\n};\nconst generateSchedule = async formData => {\n  try {\n    const response = await axios.post('http://localhost:5001/api/generate-schedule', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to generate schedule:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetch100to400LevelCourses","response","get","data","error","console","message","classifyCourses","generateSchedule","formData","post","headers"],"sources":["/Users/eugenewang/Downloads/CapstoneProject/frontend/src/services/courseService.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for the backend API\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch all 100-400 level courses\nexport const fetch100to400LevelCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses`);\n    return response.data; // Return the list of 100-400 level courses\n  } catch (error) {\n    console.error('Failed to fetch courses:', error.message);\n    throw error;\n  }\n};\n\n// Function to classify courses dynamically into core and elective\nexport const classifyCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses/classify`);\n    return response.data; // Returns { core: [...], electives: [...], electiveCounts: { ... } }\n  } catch (error) {\n    console.error('Failed to classify courses:', error.message);\n    throw error;\n  }\n};\n\nconst generateSchedule = async (formData) => {\n    try {\n        const response = await axios.post('http://localhost:5001/api/generate-schedule', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Failed to generate schedule:', error.message);\n        throw error;\n    }\n};\n\n\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,UAAU,CAAC;IAC3D,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACxD,MAAMF,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,mBAAmB,CAAC;IACpE,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC3D,MAAMF,KAAK;EACb;AACF,CAAC;AAED,MAAMI,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACY,IAAI,CAAC,6CAA6C,EAAED,QAAQ,EAAE;MACvFE,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D,MAAMF,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}