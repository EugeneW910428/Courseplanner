{"ast":null,"code":"import axios from 'axios';\nimport { classifyCourses } from '../services/courseService';\n\n// Base URL for the backend API\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch all 100-400 level courses\nexport const fetch100to400LevelCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses`);\n    return response.data; // Return the list of 100-400 level courses\n  } catch (error) {\n    console.error('Failed to fetch courses:', error.message);\n    throw error;\n  }\n};\nconst loadCourses = async () => {\n  try {\n    const {\n      core,\n      electives\n    } = await classifyCourses();\n    setCoreCourses(core);\n    setElectiveCourses(electives);\n  } catch (error) {\n    console.error('Error loading courses:', error.message);\n  } finally {\n    setLoading(false);\n  }\n};\n\n// Function to generate schedule based on user preferences and uploaded transcript\nexport const generateSchedule = async formData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/schedule/generate`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Return the generated schedule\n  } catch (error) {\n    console.error('Failed to generate schedule:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","classifyCourses","API_BASE_URL","fetch100to400LevelCourses","response","get","data","error","console","message","loadCourses","core","electives","setCoreCourses","setElectiveCourses","setLoading","generateSchedule","formData","post","headers"],"sources":["/Users/eugenewang/Downloads/CapstoneProject/frontend/src/services/courseService.js"],"sourcesContent":["import axios from 'axios';\nimport { classifyCourses } from '../services/courseService';\n\n// Base URL for the backend API\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Function to fetch all 100-400 level courses\nexport const fetch100to400LevelCourses = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/courses`);\n    return response.data; // Return the list of 100-400 level courses\n  } catch (error) {\n    console.error('Failed to fetch courses:', error.message);\n    throw error;\n  }\n};\n\nconst loadCourses = async () => {\n    try {\n        const { core, electives } = await classifyCourses();\n        setCoreCourses(core);\n        setElectiveCourses(electives);\n    } catch (error) {\n        console.error('Error loading courses:', error.message);\n    } finally {\n        setLoading(false);\n    }\n};\n\n\n// Function to generate schedule based on user preferences and uploaded transcript\nexport const generateSchedule = async (formData) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/schedule/generate`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data; // Return the generated schedule\n  } catch (error) {\n    console.error('Failed to generate schedule:', error.message);\n    throw error;\n  }\n};\n\n\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,2BAA2B;;AAE3D;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,YAAY,UAAU,CAAC;IAC3D,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACxD,MAAMF,KAAK;EACb;AACF,CAAC;AAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAU,CAAC,GAAG,MAAMX,eAAe,CAAC,CAAC;IACnDY,cAAc,CAACF,IAAI,CAAC;IACpBG,kBAAkB,CAACF,SAAS,CAAC;EACjC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACE,OAAO,CAAC;EAC1D,CAAC,SAAS;IACNM,UAAU,CAAC,KAAK,CAAC;EACrB;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACkB,IAAI,CAAC,GAAGhB,YAAY,oBAAoB,EAAEe,QAAQ,EAAE;MAC/EE,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}